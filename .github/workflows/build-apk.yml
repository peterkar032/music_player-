name: Build APK and Create GitHub Release

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  build-and-release:
    if: github.event.pull_request.merged == true  # Ensures it only triggers for merged PRs
    name: Build and Release APK
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up JDK for Android
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'
          java-package: jdk

      # Cache Gradle dependencies
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Make Gradlew Executable
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      # Build the APK
      - name: Build the APK
        run: ./gradlew assembleDebug

      # List the contents of the APK output directory (for debugging)
      - name: List APK output directory for debugging
        run: |
          echo "Listing contents of the app/build directory"
          ls -al app/build
          echo "Listing contents of the app/build/outputs directory"
          ls -al app/build/outputs
          echo "Listing contents of the app/build/outputs/apk directory"
          ls -al app/build/outputs/apk
          echo "Listing contents of the app/build/outputs/apk/release directory"
          ls -al app/build/outputs/apk/debug/

      # Extract commits with 'feat' and save to output
      - name: Extract 'feat' commits
        id: feat_commits
        run: echo "::set-output name=commits::$(git log --grep '^feat' HEAD --pretty=format:'- %s')"

      # Upload the APK as an artifact
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: MyApp-APK
          path: app/build/outputs/apk/debug/DJ-Felix-debug.apk  # Adjust path as necessary

      # Create a Release on GitHub
      - name: Create GitHub Release
        id: create_release 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: DJ_Felix Release v${{ github.run_number }}
          body: |
            This release contains the latest build of the APK.
          Feature_Commits: ${{ steps.feat_commits.outputs.commits }}
          draft: false
          prerelease: false

      # Upload the APK to the Release
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/debug/music-app-debug.apk  # Adjust path as necessary
          asset_name: DJ_Felix-v${{ github.run_number }}.apk
          asset_content_type: application/vnd.android.package-archive

